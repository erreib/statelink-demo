// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bkfEqT6DY5fNHCcMi2xmXu
// Component: PIG2mOPXV2Mc

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_statelink_demo_v_2.module.css"; // plasmic-import: bkfEqT6DY5fNHCcMi2xmXu/projectcss
import sty from "./PlasmicAppTile.module.css"; // plasmic-import: PIG2mOPXV2Mc/css

import image4Uc3Z59GjgEFi from "./images/image4.svg"; // plasmic-import: UC3Z59GjgEFi/picture

createPlasmicElementProxy;

export type PlasmicAppTile__VariantMembers = {};
export type PlasmicAppTile__VariantsArgs = {};
type VariantPropType = keyof PlasmicAppTile__VariantsArgs;
export const PlasmicAppTile__VariantProps = new Array<VariantPropType>();

export type PlasmicAppTile__ArgsType = {};
type ArgPropType = keyof PlasmicAppTile__ArgsType;
export const PlasmicAppTile__ArgProps = new Array<ArgPropType>();

export type PlasmicAppTile__OverridesType = {
  appTile2?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  frame2964?: p.Flex<"div">;
};

export interface DefaultAppTileProps {
  className?: string;
}

function PlasmicAppTile__RenderFunc(props: {
  variants: PlasmicAppTile__VariantsArgs;
  args: PlasmicAppTile__ArgsType;
  overrides: PlasmicAppTile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"appTile2"}
      data-plasmic-override={overrides.appTile2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.appTile2
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"45px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"45px"}
        loading={"lazy"}
        src={{
          src: image4Uc3Z59GjgEFi,
          fullWidth: 153,
          fullHeight: 150,
          aspectRatio: 1.016667
        }}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame2964"}
        data-plasmic-override={overrides.frame2964}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame2964)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jPEpA
          )}
        >
          {"App Name \nGrop"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__f9Ovf
          )}
        >
          {"ellipsis-v"}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  appTile2: ["appTile2", "img", "frame2964"],
  img: ["img"],
  frame2964: ["frame2964"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  appTile2: "div";
  img: typeof p.PlasmicImg;
  frame2964: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppTile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppTile__VariantsArgs;
    args?: PlasmicAppTile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAppTile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAppTile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAppTile__ArgProps,
          internalVariantPropNames: PlasmicAppTile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppTile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "appTile2") {
    func.displayName = "PlasmicAppTile";
  } else {
    func.displayName = `PlasmicAppTile.${nodeName}`;
  }
  return func;
}

export const PlasmicAppTile = Object.assign(
  // Top-level PlasmicAppTile renders the root element
  makeNodeComponent("appTile2"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    frame2964: makeNodeComponent("frame2964"),

    // Metadata about props expected for PlasmicAppTile
    internalVariantProps: PlasmicAppTile__VariantProps,
    internalArgProps: PlasmicAppTile__ArgProps
  }
);

export default PlasmicAppTile;
/* prettier-ignore-end */
