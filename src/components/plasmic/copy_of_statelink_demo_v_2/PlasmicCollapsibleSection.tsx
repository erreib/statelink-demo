// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bkfEqT6DY5fNHCcMi2xmXu
// Component: 3t9djG4rNpNM

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_statelink_demo_v_2.module.css"; // plasmic-import: bkfEqT6DY5fNHCcMi2xmXu/projectcss
import sty from "./PlasmicCollapsibleSection.module.css"; // plasmic-import: 3t9djG4rNpNM/css

import image258DjMrr5DdLFs from "./images/image25.svg"; // plasmic-import: 8DjMrr5ddLFs/picture
import image40YrIl8LCaOIkO from "./images/image40.svg"; // plasmic-import: YrIL8LCaOIkO/picture
import image270GpnTbL4K3 from "./images/image27.svg"; // plasmic-import: 0-GPN_tbL4k3/picture
import image29YuvhlkQ0Odq from "./images/image29.svg"; // plasmic-import: yuvhlkQ0_odq/picture
import image28WpR3Xa7BUlnq from "./images/image28.svg"; // plasmic-import: wpR3XA7BUlnq/picture
import image34Hh5JitqqaTbp from "./images/image34.svg"; // plasmic-import: HH5JitqqaTbp/picture
import image30SFgTutTplA4 from "./images/image30.svg"; // plasmic-import: SFgTutTPL_a4/picture

createPlasmicElementProxy;

export type PlasmicCollapsibleSection__VariantMembers = {};
export type PlasmicCollapsibleSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicCollapsibleSection__VariantsArgs;
export const PlasmicCollapsibleSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCollapsibleSection__ArgsType = {};
type ArgPropType = keyof PlasmicCollapsibleSection__ArgsType;
export const PlasmicCollapsibleSection__ArgProps = new Array<ArgPropType>();

export type PlasmicCollapsibleSection__OverridesType = {
  section?: p.Flex<"div">;
  curriculumPlanningHeader3?: p.Flex<"div">;
  frame2963?: p.Flex<"div">;
  group2999?: p.Flex<"div">;
  caretDown4?: p.Flex<"div">;
  filter4?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  curriculumPlanningSection3?: p.Flex<"div">;
  appTile5?: p.Flex<"div">;
  frame2967?: p.Flex<"div">;
  appTile29?: p.Flex<"div">;
  frame2997?: p.Flex<"div">;
  appTile33?: p.Flex<"div">;
  frame3001?: p.Flex<"div">;
  appTile34?: p.Flex<"div">;
  frame3002?: p.Flex<"div">;
  appTile35?: p.Flex<"div">;
  frame3003?: p.Flex<"div">;
  appTile36?: p.Flex<"div">;
  frame3004?: p.Flex<"div">;
  appTile37?: p.Flex<"div">;
  frame3005?: p.Flex<"div">;
};

export interface DefaultCollapsibleSectionProps {
  className?: string;
}

function PlasmicCollapsibleSection__RenderFunc(props: {
  variants: PlasmicCollapsibleSection__VariantsArgs;
  args: PlasmicCollapsibleSection__ArgsType;
  overrides: PlasmicCollapsibleSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"section"}
      data-plasmic-override={overrides.section}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.section
      )}
    >
      <div
        data-plasmic-name={"curriculumPlanningHeader3"}
        data-plasmic-override={overrides.curriculumPlanningHeader3}
        className={classNames(projectcss.all, sty.curriculumPlanningHeader3)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame2963"}
          data-plasmic-override={overrides.frame2963}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame2963)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dwlyq
            )}
          >
            {"Curriculum Planning"}
          </div>
          <div
            data-plasmic-name={"group2999"}
            data-plasmic-override={overrides.group2999}
            className={classNames(projectcss.all, sty.group2999)}
          >
            <div
              data-plasmic-name={"caretDown4"}
              data-plasmic-override={overrides.caretDown4}
              className={classNames(projectcss.all, sty.caretDown4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jTlKv
                )}
              >
                {"caret-down"}
              </div>
            </div>
            <div
              data-plasmic-name={"filter4"}
              data-plasmic-override={overrides.filter4}
              className={classNames(projectcss.all, sty.filter4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Nlr6
                )}
              >
                {"filter"}
              </div>
            </div>
          </div>
        </p.Stack>
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ofjo
          )}
        >
          {"chevron-down"}
        </div>
      </div>
      <p.Stack
        as={"div"}
        data-plasmic-name={"curriculumPlanningSection3"}
        data-plasmic-override={overrides.curriculumPlanningSection3}
        hasGap={true}
        className={classNames(projectcss.all, sty.curriculumPlanningSection3)}
      >
        <div
          data-plasmic-name={"appTile5"}
          data-plasmic-override={overrides.appTile5}
          className={classNames(projectcss.all, sty.appTile5)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__lqv0S)}
            displayHeight={"60px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"60px"}
            loading={"lazy"}
            src={{
              src: image258DjMrr5DdLFs,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1
            }}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame2967"}
            data-plasmic-override={overrides.frame2967}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame2967)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q32Xx
              )}
            >
              {"Schoolnet"}
            </div>
          </p.Stack>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ptijg
            )}
          >
            {"ellipsis-v"}
          </div>
        </div>
        <div
          data-plasmic-name={"appTile29"}
          data-plasmic-override={overrides.appTile29}
          className={classNames(projectcss.all, sty.appTile29)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img___6XNzj)}
            displayHeight={"60px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"60px"}
            loading={"lazy"}
            src={{
              src: image40YrIl8LCaOIkO,
              fullWidth: 152,
              fullHeight: 150,
              aspectRatio: 1.016393
            }}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame2997"}
            data-plasmic-override={overrides.frame2997}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame2997)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__irbi7
              )}
            >
              {"EVAAS"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__v3WrY
              )}
            >
              {"ellipsis-v"}
            </div>
          </p.Stack>
        </div>
        <div
          data-plasmic-name={"appTile33"}
          data-plasmic-override={overrides.appTile33}
          className={classNames(projectcss.all, sty.appTile33)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__rbkcd)}
            displayHeight={"60px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"60px"}
            loading={"lazy"}
            src={{
              src: image270GpnTbL4K3,
              fullWidth: 153,
              fullHeight: 150,
              aspectRatio: 1.016667
            }}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3001"}
            data-plasmic-override={overrides.frame3001}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3001)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zRal
              )}
            >
              {"Power\nTeacher"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yWEm
              )}
            >
              {"ellipsis-v"}
            </div>
          </p.Stack>
        </div>
        <div
          data-plasmic-name={"appTile34"}
          data-plasmic-override={overrides.appTile34}
          className={classNames(projectcss.all, sty.appTile34)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__p5KI)}
            displayHeight={"60px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"60px"}
            loading={"lazy"}
            src={{
              src: image29YuvhlkQ0Odq,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1
            }}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3002"}
            data-plasmic-override={overrides.frame3002}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3002)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1GuzV
              )}
            >
              {"PowerSchool Student"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ifOC
              )}
            >
              {"ellipsis-v"}
            </div>
          </p.Stack>
        </div>
        <div
          data-plasmic-name={"appTile35"}
          data-plasmic-override={overrides.appTile35}
          className={classNames(projectcss.all, sty.appTile35)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__goDw)}
            displayHeight={"60px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"60px"}
            loading={"lazy"}
            src={{
              src: image28WpR3Xa7BUlnq,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1
            }}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3003"}
            data-plasmic-override={overrides.frame3003}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3003)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d18Vx
              )}
            >
              {"ECATS    "}
            </div>
          </p.Stack>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hWwko
            )}
          >
            {"ellipsis-v"}
          </div>
        </div>
        <div
          data-plasmic-name={"appTile36"}
          data-plasmic-override={overrides.appTile36}
          className={classNames(projectcss.all, sty.appTile36)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__jKKtZ)}
            displayHeight={"60px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"60px"}
            loading={"lazy"}
            src={{
              src: image34Hh5JitqqaTbp,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1
            }}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3004"}
            data-plasmic-override={overrides.frame3004}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3004)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__t1CMn
              )}
            >
              {"Power\nSchool"}
            </div>
          </p.Stack>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__m7R4F
            )}
          >
            {"ellipsis-v"}
          </div>
        </div>
        <div
          data-plasmic-name={"appTile37"}
          data-plasmic-override={overrides.appTile37}
          className={classNames(projectcss.all, sty.appTile37)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__rhFeq)}
            displayHeight={"60px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"60px"}
            loading={"lazy"}
            src={{
              src: image30SFgTutTplA4,
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: 1
            }}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3005"}
            data-plasmic-override={overrides.frame3005}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3005)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ozU5K
              )}
            >
              {"NCEES"}
            </div>
          </p.Stack>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bnvzF
            )}
          >
            {"ellipsis-v"}
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section: [
    "section",
    "curriculumPlanningHeader3",
    "frame2963",
    "group2999",
    "caretDown4",
    "filter4",
    "freeBox",
    "curriculumPlanningSection3",
    "appTile5",
    "frame2967",
    "appTile29",
    "frame2997",
    "appTile33",
    "frame3001",
    "appTile34",
    "frame3002",
    "appTile35",
    "frame3003",
    "appTile36",
    "frame3004",
    "appTile37",
    "frame3005"
  ],
  curriculumPlanningHeader3: [
    "curriculumPlanningHeader3",
    "frame2963",
    "group2999",
    "caretDown4",
    "filter4",
    "freeBox"
  ],
  frame2963: ["frame2963", "group2999", "caretDown4", "filter4"],
  group2999: ["group2999", "caretDown4", "filter4"],
  caretDown4: ["caretDown4"],
  filter4: ["filter4"],
  freeBox: ["freeBox"],
  curriculumPlanningSection3: [
    "curriculumPlanningSection3",
    "appTile5",
    "frame2967",
    "appTile29",
    "frame2997",
    "appTile33",
    "frame3001",
    "appTile34",
    "frame3002",
    "appTile35",
    "frame3003",
    "appTile36",
    "frame3004",
    "appTile37",
    "frame3005"
  ],
  appTile5: ["appTile5", "frame2967"],
  frame2967: ["frame2967"],
  appTile29: ["appTile29", "frame2997"],
  frame2997: ["frame2997"],
  appTile33: ["appTile33", "frame3001"],
  frame3001: ["frame3001"],
  appTile34: ["appTile34", "frame3002"],
  frame3002: ["frame3002"],
  appTile35: ["appTile35", "frame3003"],
  frame3003: ["frame3003"],
  appTile36: ["appTile36", "frame3004"],
  frame3004: ["frame3004"],
  appTile37: ["appTile37", "frame3005"],
  frame3005: ["frame3005"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  section: "div";
  curriculumPlanningHeader3: "div";
  frame2963: "div";
  group2999: "div";
  caretDown4: "div";
  filter4: "div";
  freeBox: "div";
  curriculumPlanningSection3: "div";
  appTile5: "div";
  frame2967: "div";
  appTile29: "div";
  frame2997: "div";
  appTile33: "div";
  frame3001: "div";
  appTile34: "div";
  frame3002: "div";
  appTile35: "div";
  frame3003: "div";
  appTile36: "div";
  frame3004: "div";
  appTile37: "div";
  frame3005: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollapsibleSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollapsibleSection__VariantsArgs;
    args?: PlasmicCollapsibleSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollapsibleSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCollapsibleSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCollapsibleSection__ArgProps,
          internalVariantPropNames: PlasmicCollapsibleSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCollapsibleSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section") {
    func.displayName = "PlasmicCollapsibleSection";
  } else {
    func.displayName = `PlasmicCollapsibleSection.${nodeName}`;
  }
  return func;
}

export const PlasmicCollapsibleSection = Object.assign(
  // Top-level PlasmicCollapsibleSection renders the root element
  makeNodeComponent("section"),
  {
    // Helper components rendering sub-elements
    curriculumPlanningHeader3: makeNodeComponent("curriculumPlanningHeader3"),
    frame2963: makeNodeComponent("frame2963"),
    group2999: makeNodeComponent("group2999"),
    caretDown4: makeNodeComponent("caretDown4"),
    filter4: makeNodeComponent("filter4"),
    freeBox: makeNodeComponent("freeBox"),
    curriculumPlanningSection3: makeNodeComponent("curriculumPlanningSection3"),
    appTile5: makeNodeComponent("appTile5"),
    frame2967: makeNodeComponent("frame2967"),
    appTile29: makeNodeComponent("appTile29"),
    frame2997: makeNodeComponent("frame2997"),
    appTile33: makeNodeComponent("appTile33"),
    frame3001: makeNodeComponent("frame3001"),
    appTile34: makeNodeComponent("appTile34"),
    frame3002: makeNodeComponent("frame3002"),
    appTile35: makeNodeComponent("appTile35"),
    frame3003: makeNodeComponent("frame3003"),
    appTile36: makeNodeComponent("appTile36"),
    frame3004: makeNodeComponent("frame3004"),
    appTile37: makeNodeComponent("appTile37"),
    frame3005: makeNodeComponent("frame3005"),

    // Metadata about props expected for PlasmicCollapsibleSection
    internalVariantProps: PlasmicCollapsibleSection__VariantProps,
    internalArgProps: PlasmicCollapsibleSection__ArgProps
  }
);

export default PlasmicCollapsibleSection;
/* prettier-ignore-end */
