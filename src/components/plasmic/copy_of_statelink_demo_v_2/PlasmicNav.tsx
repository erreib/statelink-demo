// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bkfEqT6DY5fNHCcMi2xmXu
// Component: sO2D3YChQAU1

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsbKrBc14G5P1J } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bKrBc14g5P1J/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_statelink_demo_v_2.module.css"; // plasmic-import: bkfEqT6DY5fNHCcMi2xmXu/projectcss
import sty from "./PlasmicNav.module.css"; // plasmic-import: sO2D3YChQAU1/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 2h1YbdmlrrjG/icon
import vector6C972FdjVlrM from "./images/vector6.svg"; // plasmic-import: c_972fdjVlrM/picture
import group3WGQwvhy4Rgc from "./images/group3.svg"; // plasmic-import: wG_qwvhy4RGC/picture
import image326SoZ90GzH3Op from "./images/image32.svg"; // plasmic-import: 6SoZ90gzH3OP/picture

createPlasmicElementProxy;

export type PlasmicNav__VariantMembers = {
  collapsed: "collapsed";
};
export type PlasmicNav__VariantsArgs = {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
};
type VariantPropType = keyof PlasmicNav__VariantsArgs;
export const PlasmicNav__VariantProps = new Array<VariantPropType>("collapsed");

export type PlasmicNav__ArgsType = {};
type ArgPropType = keyof PlasmicNav__ArgsType;
export const PlasmicNav__ArgProps = new Array<ArgPropType>();

export type PlasmicNav__OverridesType = {
  root?: p.Flex<"div">;
  caretLeft?: p.Flex<"div">;
  ncdpiNextGenColor1?: p.Flex<"div">;
  frame1340?: p.Flex<"div">;
  ncdpiNextGenColor2?: p.Flex<"div">;
  image11?: p.Flex<"div">;
  socialMedia?: p.Flex<"div">;
  image24?: p.Flex<"div">;
  group3092?: p.Flex<"div">;
  image12?: p.Flex<"div">;
  doeStatePortal?: p.Flex<"div">;
  card2?: p.Flex<"div">;
  background?: p.Flex<"div">;
  frame?: p.Flex<"div">;
  maskGroup?: p.Flex<"div">;
  frame1338?: p.Flex<"div">;
  sideNavBlocks?: p.Flex<"div">;
  _?: p.Flex<"div">;
  sideNavBlocks4?: p.Flex<"div">;
  grid2Plus?: p.Flex<"div">;
  _7?: p.Flex<"div">;
  sideNavBlocks5?: p.Flex<"div">;
  _9?: p.Flex<"div">;
  component23?: p.Flex<"div">;
  component24?: p.Flex<"div">;
  signOut?: p.Flex<"div">;
  _10?: p.Flex<"div">;
  card?: p.Flex<"div">;
  frame2988?: p.Flex<"div">;
  group3300?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  superAdmin?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  sideNavBlocks2?: p.Flex<"div">;
  tachometerAlt?: p.Flex<"div">;
  _5?: p.Flex<"div">;
  apps?: p.Flex<"div">;
  _4?: p.Flex<"div">;
  _2?: p.Flex<"div">;
  overview?: p.Flex<"div">;
  _3?: p.Flex<"div">;
  appList?: p.Flex<"div">;
  component18?: p.Flex<"div">;
  allUsers?: p.Flex<"div">;
  component19?: p.Flex<"div">;
  appUsage?: p.Flex<"div">;
  component20?: p.Flex<"div">;
  studentsStaff?: p.Flex<"div">;
  figmaPaste?: p.Flex<"div">;
  sideNavBlocks3?: p.Flex<"div">;
  dashboard?: p.Flex<"div">;
  _6?: p.Flex<"div">;
  component22?: p.Flex<"div">;
  cog?: p.Flex<"div">;
  dashboard2?: p.Flex<"div">;
  component21?: p.Flex<"div">;
  fileInvoiceDollar?: p.Flex<"div">;
  fileInvoiceDollar2?: p.Flex<"div">;
  dashboard3?: p.Flex<"div">;
  _8?: p.Flex<"div">;
};

export interface DefaultNavProps {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  className?: string;
}

function PlasmicNav__RenderFunc(props: {
  variants: PlasmicNav__VariantsArgs;
  args: PlasmicNav__ArgsType;
  overrides: PlasmicNav__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapsed
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbKrBc14G5P1J()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootcollapsed]: hasVariant($state, "collapsed", "collapsed") }
      )}
    >
      <div
        data-plasmic-name={"caretLeft"}
        data-plasmic-override={overrides.caretLeft}
        className={classNames(projectcss.all, sty.caretLeft, {
          [sty.caretLeftcollapsed]: hasVariant($state, "collapsed", "collapsed")
        })}
        onClick={async event => {
          const $steps = {};
          $steps["updateCollapsed"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "collapsed",
                  operation: 2,
                  value: "collapsed"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = p.get($state, vgroup);
                  p.set($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            typeof $steps["updateCollapsed"] === "object" &&
            typeof $steps["updateCollapsed"].then === "function"
          ) {
            $steps["updateCollapsed"] = await $steps["updateCollapsed"];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xJyz5,
            {
              [sty.textcollapsed__xJyz5RwzF]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            }
          )}
        >
          {hasVariant($state, "collapsed", "collapsed")
            ? "caret-right"
            : "caret-left"}
        </div>
      </div>
      <div
        data-plasmic-name={"ncdpiNextGenColor1"}
        data-plasmic-override={overrides.ncdpiNextGenColor1}
        className={classNames(projectcss.all, sty.ncdpiNextGenColor1, {
          [sty.ncdpiNextGenColor1collapsed]: hasVariant(
            $state,
            "collapsed",
            "collapsed"
          )
        })}
      />

      {(hasVariant($state, "collapsed", "collapsed") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame1340"}
          data-plasmic-override={overrides.frame1340}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame1340, {
            [sty.frame1340collapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            )
          })}
        >
          <div
            data-plasmic-name={"ncdpiNextGenColor2"}
            data-plasmic-override={overrides.ncdpiNextGenColor2}
            className={classNames(projectcss.all, sty.ncdpiNextGenColor2)}
          />

          {false ? (
            <div
              data-plasmic-name={"image11"}
              data-plasmic-override={overrides.image11}
              className={classNames(projectcss.all, sty.image11)}
            />
          ) : null}
          {false ? (
            <div
              data-plasmic-name={"socialMedia"}
              data-plasmic-override={overrides.socialMedia}
              className={classNames(projectcss.all, sty.socialMedia)}
            >
              <div
                data-plasmic-name={"image24"}
                data-plasmic-override={overrides.image24}
                className={classNames(projectcss.all, sty.image24)}
              />
            </div>
          ) : null}
          {false ? (
            <div
              data-plasmic-name={"group3092"}
              data-plasmic-override={overrides.group3092}
              className={classNames(projectcss.all, sty.group3092)}
            >
              <div
                data-plasmic-name={"image12"}
                data-plasmic-override={overrides.image12}
                className={classNames(projectcss.all, sty.image12)}
              />

              <div
                data-plasmic-name={"doeStatePortal"}
                data-plasmic-override={overrides.doeStatePortal}
                className={classNames(projectcss.all, sty.doeStatePortal)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kXyt
                  )}
                >
                  {"DOE State Portal"}
                </div>
              </div>
            </div>
          ) : null}
          <p.Stack
            as={"div"}
            data-plasmic-name={"card2"}
            data-plasmic-override={overrides.card2}
            hasGap={true}
            className={classNames(projectcss.all, sty.card2)}
          >
            {false ? (
              <div
                data-plasmic-name={"background"}
                data-plasmic-override={overrides.background}
                className={classNames(projectcss.all, sty.background)}
              />
            ) : null}
            <div
              data-plasmic-name={"frame"}
              data-plasmic-override={overrides.frame}
              className={classNames(projectcss.all, sty.frame)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__tCxvg, {
                  [sty.imgcollapsed__tCxvgRwzF]: hasVariant(
                    $state,
                    "collapsed",
                    "collapsed"
                  )
                })}
                displayHeight={"46px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"46px"}
                loading={"lazy"}
                src={{
                  src: vector6C972FdjVlrM,
                  fullWidth: 46,
                  fullHeight: 46,
                  aspectRatio: 1
                }}
              />

              <div
                data-plasmic-name={"maskGroup"}
                data-plasmic-override={overrides.maskGroup}
                className={classNames(projectcss.all, sty.maskGroup)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__cake, {
                    [sty.imgcollapsed__cakeRwzF]: hasVariant(
                      $state,
                      "collapsed",
                      "collapsed"
                    )
                  })}
                  displayHeight={"45.518px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"47.779px"}
                  loading={"lazy"}
                  src={{
                    src: group3WGQwvhy4Rgc,
                    fullWidth: 47.779,
                    fullHeight: 45.518,
                    aspectRatio: 1.043478
                  }}
                />
              </div>
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame1338"}
            data-plasmic-override={overrides.frame1338}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1338)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"sideNavBlocks"}
              data-plasmic-override={overrides.sideNavBlocks}
              hasGap={true}
              className={classNames(projectcss.all, sty.sideNavBlocks)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ej3QZ
                )}
              >
                {"file-alt"}
              </div>
              <div
                data-plasmic-name={"_"}
                data-plasmic-override={overrides._}
                className={classNames(projectcss.all, sty._)}
              >
                {false ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ye3DD
                    )}
                  >
                    {"\uf078"}
                  </div>
                ) : null}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"sideNavBlocks4"}
              data-plasmic-override={overrides.sideNavBlocks4}
              hasGap={true}
              className={classNames(projectcss.all, sty.sideNavBlocks4)}
            >
              <div
                data-plasmic-name={"grid2Plus"}
                data-plasmic-override={overrides.grid2Plus}
                className={classNames(projectcss.all, sty.grid2Plus)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qcPk1
                  )}
                >
                  {"grid-2-plus"}
                </div>
              </div>
              <div
                data-plasmic-name={"_7"}
                data-plasmic-override={overrides._7}
                className={classNames(projectcss.all, sty._7)}
              >
                {false ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xFq9Q
                    )}
                  >
                    {"\uf078"}
                  </div>
                ) : null}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"sideNavBlocks5"}
              data-plasmic-override={overrides.sideNavBlocks5}
              hasGap={true}
              className={classNames(projectcss.all, sty.sideNavBlocks5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pyZrE
                )}
              >
                {"cog"}
              </div>
              <div
                data-plasmic-name={"_9"}
                data-plasmic-override={overrides._9}
                className={classNames(projectcss.all, sty._9)}
              >
                {false ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8HgYd
                    )}
                  >
                    {"\uf078"}
                  </div>
                ) : null}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"component23"}
              data-plasmic-override={overrides.component23}
              hasGap={true}
              className={classNames(projectcss.all, sty.component23)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sOy70
                )}
              >
                {"books"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"component24"}
              data-plasmic-override={overrides.component24}
              hasGap={true}
              className={classNames(projectcss.all, sty.component24)}
            >
              <div
                data-plasmic-name={"signOut"}
                data-plasmic-override={overrides.signOut}
                className={classNames(projectcss.all, sty.signOut)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h4GR
                  )}
                >
                  {"sign-out"}
                </div>
              </div>
              <div
                data-plasmic-name={"_10"}
                data-plasmic-override={overrides._10}
                className={classNames(projectcss.all, sty._10)}
              >
                {false ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9LsYz
                    )}
                  >
                    {"\uf078"}
                  </div>
                ) : null}
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      ) : null}
      <p.Stack
        as={"div"}
        data-plasmic-name={"card"}
        data-plasmic-override={overrides.card}
        hasGap={true}
        className={classNames(projectcss.all, sty.card)}
      >
        <div
          data-plasmic-name={"frame2988"}
          data-plasmic-override={overrides.frame2988}
          className={classNames(projectcss.all, sty.frame2988, {
            [sty.frame2988collapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            )
          })}
        >
          <div
            data-plasmic-name={"group3300"}
            data-plasmic-override={overrides.group3300}
            className={classNames(projectcss.all, sty.group3300)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__j91QW, {
                [sty.imgcollapsed__j91QWRwzF]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              })}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"40px"}
              loading={"lazy"}
              src={{
                src: image326SoZ90GzH3Op,
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          </div>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a6X
              )}
            >
              {"Bob Cotes"}
            </div>
            <div
              data-plasmic-name={"superAdmin"}
              data-plasmic-override={overrides.superAdmin}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.superAdmin
              )}
            >
              {"Super Admin "}
            </div>
          </div>
          <Icon3Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        data-plasmic-name={"sideNavBlocks2"}
        data-plasmic-override={overrides.sideNavBlocks2}
        hasGap={true}
        className={classNames(projectcss.all, sty.sideNavBlocks2, {
          [sty.sideNavBlocks2collapsed]: hasVariant(
            $state,
            "collapsed",
            "collapsed"
          )
        })}
      >
        <div
          data-plasmic-name={"tachometerAlt"}
          data-plasmic-override={overrides.tachometerAlt}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.tachometerAlt
          )}
        >
          {"file-alt"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3FSux,
            {
              [sty.textcollapsed___3FSuxRwzF]: hasVariant(
                $state,
                "collapsed",
                "collapsed"
              )
            }
          )}
        >
          {"Dashboard"}
        </div>
        <div
          data-plasmic-name={"_5"}
          data-plasmic-override={overrides._5}
          className={classNames(projectcss.all, sty._5)}
        >
          {false ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ha9ME
              )}
            >
              {"\uf078"}
            </div>
          ) : null}
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        data-plasmic-name={"apps"}
        data-plasmic-override={overrides.apps}
        hasGap={true}
        className={classNames(projectcss.all, sty.apps, {
          [sty.appscollapsed]: hasVariant($state, "collapsed", "collapsed")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"_4"}
          data-plasmic-override={overrides._4}
          hasGap={true}
          className={classNames(projectcss.all, sty._4)}
        >
          <div
            data-plasmic-name={"_2"}
            data-plasmic-override={overrides._2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty._2
            )}
          >
            {"grid-2-plus"}
          </div>
          <div
            data-plasmic-name={"overview"}
            data-plasmic-override={overrides.overview}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.overview
            )}
          >
            {"Apps"}
          </div>
        </p.Stack>
        <div
          data-plasmic-name={"_3"}
          data-plasmic-override={overrides._3}
          className={classNames(projectcss.all, sty._3)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__l5RBy
            )}
          >
            {"\uf077"}
          </div>
        </div>
      </p.Stack>
      <p.Stack
        as={"div"}
        data-plasmic-name={"appList"}
        data-plasmic-override={overrides.appList}
        hasGap={true}
        className={classNames(projectcss.all, sty.appList, {
          [sty.appListcollapsed]: hasVariant($state, "collapsed", "collapsed")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"component18"}
          data-plasmic-override={overrides.component18}
          hasGap={true}
          className={classNames(projectcss.all, sty.component18)}
        >
          <div
            data-plasmic-name={"allUsers"}
            data-plasmic-override={overrides.allUsers}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.allUsers
            )}
          >
            {"Math "}
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          data-plasmic-name={"component19"}
          data-plasmic-override={overrides.component19}
          hasGap={true}
          className={classNames(projectcss.all, sty.component19)}
        >
          <div
            data-plasmic-name={"appUsage"}
            data-plasmic-override={overrides.appUsage}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.appUsage
            )}
          >
            {"Early Education"}
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          data-plasmic-name={"component20"}
          data-plasmic-override={overrides.component20}
          hasGap={true}
          className={classNames(projectcss.all, sty.component20)}
        >
          <div
            data-plasmic-name={"studentsStaff"}
            data-plasmic-override={overrides.studentsStaff}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.studentsStaff
            )}
          >
            {"Finance"}
          </div>
        </p.Stack>
      </p.Stack>
      <div
        data-plasmic-name={"figmaPaste"}
        data-plasmic-override={overrides.figmaPaste}
        className={classNames(projectcss.all, sty.figmaPaste, {
          [sty.figmaPastecollapsed]: hasVariant(
            $state,
            "collapsed",
            "collapsed"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sideNavBlocks3"}
          data-plasmic-override={overrides.sideNavBlocks3}
          hasGap={true}
          className={classNames(projectcss.all, sty.sideNavBlocks3, {
            [sty.sideNavBlocks3collapsed]: hasVariant(
              $state,
              "collapsed",
              "collapsed"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__aQPso,
              {
                [sty.textcollapsed__aQPsoRwzF]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
          >
            {"cog"}
          </div>
          <div
            data-plasmic-name={"dashboard"}
            data-plasmic-override={overrides.dashboard}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.dashboard,
              {
                [sty.dashboardcollapsed]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
          >
            {"Settings"}
          </div>
          <div
            data-plasmic-name={"_6"}
            data-plasmic-override={overrides._6}
            className={classNames(projectcss.all, sty._6)}
          >
            {false ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x3LXy
                )}
              >
                {"\uf078"}
              </div>
            ) : null}
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          data-plasmic-name={"component22"}
          data-plasmic-override={overrides.component22}
          hasGap={true}
          className={classNames(projectcss.all, sty.component22)}
        >
          <div
            data-plasmic-name={"cog"}
            data-plasmic-override={overrides.cog}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.cog,
              {
                [sty.cogcollapsed]: hasVariant($state, "collapsed", "collapsed")
              }
            )}
          >
            {"books"}
          </div>
          <div
            data-plasmic-name={"dashboard2"}
            data-plasmic-override={overrides.dashboard2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.dashboard2,
              {
                [sty.dashboard2collapsed]: hasVariant(
                  $state,
                  "collapsed",
                  "collapsed"
                )
              }
            )}
          >
            {"External Resources"}
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          data-plasmic-name={"component21"}
          data-plasmic-override={overrides.component21}
          hasGap={true}
          className={classNames(projectcss.all, sty.component21)}
        >
          <div
            data-plasmic-name={"fileInvoiceDollar"}
            data-plasmic-override={overrides.fileInvoiceDollar}
            className={classNames(projectcss.all, sty.fileInvoiceDollar)}
          >
            <div
              data-plasmic-name={"fileInvoiceDollar2"}
              data-plasmic-override={overrides.fileInvoiceDollar2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.fileInvoiceDollar2
              )}
            >
              {"sign-out"}
            </div>
          </div>
          <div
            data-plasmic-name={"dashboard3"}
            data-plasmic-override={overrides.dashboard3}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.dashboard3
            )}
          >
            {"Log Out"}
          </div>
          <div
            data-plasmic-name={"_8"}
            data-plasmic-override={overrides._8}
            className={classNames(projectcss.all, sty._8)}
          >
            {false ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dXRs
                )}
              >
                {"\uf078"}
              </div>
            ) : null}
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "caretLeft",
    "ncdpiNextGenColor1",
    "frame1340",
    "ncdpiNextGenColor2",
    "image11",
    "socialMedia",
    "image24",
    "group3092",
    "image12",
    "doeStatePortal",
    "card2",
    "background",
    "frame",
    "maskGroup",
    "frame1338",
    "sideNavBlocks",
    "_",
    "sideNavBlocks4",
    "grid2Plus",
    "_7",
    "sideNavBlocks5",
    "_9",
    "component23",
    "component24",
    "signOut",
    "_10",
    "card",
    "frame2988",
    "group3300",
    "freeBox",
    "superAdmin",
    "svg",
    "sideNavBlocks2",
    "tachometerAlt",
    "_5",
    "apps",
    "_4",
    "_2",
    "overview",
    "_3",
    "appList",
    "component18",
    "allUsers",
    "component19",
    "appUsage",
    "component20",
    "studentsStaff",
    "figmaPaste",
    "sideNavBlocks3",
    "dashboard",
    "_6",
    "component22",
    "cog",
    "dashboard2",
    "component21",
    "fileInvoiceDollar",
    "fileInvoiceDollar2",
    "dashboard3",
    "_8"
  ],
  caretLeft: ["caretLeft"],
  ncdpiNextGenColor1: ["ncdpiNextGenColor1"],
  frame1340: [
    "frame1340",
    "ncdpiNextGenColor2",
    "image11",
    "socialMedia",
    "image24",
    "group3092",
    "image12",
    "doeStatePortal",
    "card2",
    "background",
    "frame",
    "maskGroup",
    "frame1338",
    "sideNavBlocks",
    "_",
    "sideNavBlocks4",
    "grid2Plus",
    "_7",
    "sideNavBlocks5",
    "_9",
    "component23",
    "component24",
    "signOut",
    "_10"
  ],
  ncdpiNextGenColor2: ["ncdpiNextGenColor2"],
  image11: ["image11"],
  socialMedia: ["socialMedia", "image24"],
  image24: ["image24"],
  group3092: ["group3092", "image12", "doeStatePortal"],
  image12: ["image12"],
  doeStatePortal: ["doeStatePortal"],
  card2: ["card2", "background", "frame", "maskGroup"],
  background: ["background"],
  frame: ["frame", "maskGroup"],
  maskGroup: ["maskGroup"],
  frame1338: [
    "frame1338",
    "sideNavBlocks",
    "_",
    "sideNavBlocks4",
    "grid2Plus",
    "_7",
    "sideNavBlocks5",
    "_9",
    "component23",
    "component24",
    "signOut",
    "_10"
  ],
  sideNavBlocks: ["sideNavBlocks", "_"],
  _: ["_"],
  sideNavBlocks4: ["sideNavBlocks4", "grid2Plus", "_7"],
  grid2Plus: ["grid2Plus"],
  _7: ["_7"],
  sideNavBlocks5: ["sideNavBlocks5", "_9"],
  _9: ["_9"],
  component23: ["component23"],
  component24: ["component24", "signOut", "_10"],
  signOut: ["signOut"],
  _10: ["_10"],
  card: ["card", "frame2988", "group3300", "freeBox", "superAdmin", "svg"],
  frame2988: ["frame2988", "group3300", "freeBox", "superAdmin", "svg"],
  group3300: ["group3300"],
  freeBox: ["freeBox", "superAdmin"],
  superAdmin: ["superAdmin"],
  svg: ["svg"],
  sideNavBlocks2: ["sideNavBlocks2", "tachometerAlt", "_5"],
  tachometerAlt: ["tachometerAlt"],
  _5: ["_5"],
  apps: ["apps", "_4", "_2", "overview", "_3"],
  _4: ["_4", "_2", "overview"],
  _2: ["_2"],
  overview: ["overview"],
  _3: ["_3"],
  appList: [
    "appList",
    "component18",
    "allUsers",
    "component19",
    "appUsage",
    "component20",
    "studentsStaff"
  ],
  component18: ["component18", "allUsers"],
  allUsers: ["allUsers"],
  component19: ["component19", "appUsage"],
  appUsage: ["appUsage"],
  component20: ["component20", "studentsStaff"],
  studentsStaff: ["studentsStaff"],
  figmaPaste: [
    "figmaPaste",
    "sideNavBlocks3",
    "dashboard",
    "_6",
    "component22",
    "cog",
    "dashboard2",
    "component21",
    "fileInvoiceDollar",
    "fileInvoiceDollar2",
    "dashboard3",
    "_8"
  ],
  sideNavBlocks3: ["sideNavBlocks3", "dashboard", "_6"],
  dashboard: ["dashboard"],
  _6: ["_6"],
  component22: ["component22", "cog", "dashboard2"],
  cog: ["cog"],
  dashboard2: ["dashboard2"],
  component21: [
    "component21",
    "fileInvoiceDollar",
    "fileInvoiceDollar2",
    "dashboard3",
    "_8"
  ],
  fileInvoiceDollar: ["fileInvoiceDollar", "fileInvoiceDollar2"],
  fileInvoiceDollar2: ["fileInvoiceDollar2"],
  dashboard3: ["dashboard3"],
  _8: ["_8"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  caretLeft: "div";
  ncdpiNextGenColor1: "div";
  frame1340: "div";
  ncdpiNextGenColor2: "div";
  image11: "div";
  socialMedia: "div";
  image24: "div";
  group3092: "div";
  image12: "div";
  doeStatePortal: "div";
  card2: "div";
  background: "div";
  frame: "div";
  maskGroup: "div";
  frame1338: "div";
  sideNavBlocks: "div";
  _: "div";
  sideNavBlocks4: "div";
  grid2Plus: "div";
  _7: "div";
  sideNavBlocks5: "div";
  _9: "div";
  component23: "div";
  component24: "div";
  signOut: "div";
  _10: "div";
  card: "div";
  frame2988: "div";
  group3300: "div";
  freeBox: "div";
  superAdmin: "div";
  svg: "svg";
  sideNavBlocks2: "div";
  tachometerAlt: "div";
  _5: "div";
  apps: "div";
  _4: "div";
  _2: "div";
  overview: "div";
  _3: "div";
  appList: "div";
  component18: "div";
  allUsers: "div";
  component19: "div";
  appUsage: "div";
  component20: "div";
  studentsStaff: "div";
  figmaPaste: "div";
  sideNavBlocks3: "div";
  dashboard: "div";
  _6: "div";
  component22: "div";
  cog: "div";
  dashboard2: "div";
  component21: "div";
  fileInvoiceDollar: "div";
  fileInvoiceDollar2: "div";
  dashboard3: "div";
  _8: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNav__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNav__VariantsArgs;
    args?: PlasmicNav__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNav__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNav__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNav__ArgProps,
          internalVariantPropNames: PlasmicNav__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNav";
  } else {
    func.displayName = `PlasmicNav.${nodeName}`;
  }
  return func;
}

export const PlasmicNav = Object.assign(
  // Top-level PlasmicNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    caretLeft: makeNodeComponent("caretLeft"),
    ncdpiNextGenColor1: makeNodeComponent("ncdpiNextGenColor1"),
    frame1340: makeNodeComponent("frame1340"),
    ncdpiNextGenColor2: makeNodeComponent("ncdpiNextGenColor2"),
    image11: makeNodeComponent("image11"),
    socialMedia: makeNodeComponent("socialMedia"),
    image24: makeNodeComponent("image24"),
    group3092: makeNodeComponent("group3092"),
    image12: makeNodeComponent("image12"),
    doeStatePortal: makeNodeComponent("doeStatePortal"),
    card2: makeNodeComponent("card2"),
    background: makeNodeComponent("background"),
    frame: makeNodeComponent("frame"),
    maskGroup: makeNodeComponent("maskGroup"),
    frame1338: makeNodeComponent("frame1338"),
    sideNavBlocks: makeNodeComponent("sideNavBlocks"),
    _: makeNodeComponent("_"),
    sideNavBlocks4: makeNodeComponent("sideNavBlocks4"),
    grid2Plus: makeNodeComponent("grid2Plus"),
    _7: makeNodeComponent("_7"),
    sideNavBlocks5: makeNodeComponent("sideNavBlocks5"),
    _9: makeNodeComponent("_9"),
    component23: makeNodeComponent("component23"),
    component24: makeNodeComponent("component24"),
    signOut: makeNodeComponent("signOut"),
    _10: makeNodeComponent("_10"),
    card: makeNodeComponent("card"),
    frame2988: makeNodeComponent("frame2988"),
    group3300: makeNodeComponent("group3300"),
    freeBox: makeNodeComponent("freeBox"),
    superAdmin: makeNodeComponent("superAdmin"),
    svg: makeNodeComponent("svg"),
    sideNavBlocks2: makeNodeComponent("sideNavBlocks2"),
    tachometerAlt: makeNodeComponent("tachometerAlt"),
    _5: makeNodeComponent("_5"),
    apps: makeNodeComponent("apps"),
    _4: makeNodeComponent("_4"),
    _2: makeNodeComponent("_2"),
    overview: makeNodeComponent("overview"),
    _3: makeNodeComponent("_3"),
    appList: makeNodeComponent("appList"),
    component18: makeNodeComponent("component18"),
    allUsers: makeNodeComponent("allUsers"),
    component19: makeNodeComponent("component19"),
    appUsage: makeNodeComponent("appUsage"),
    component20: makeNodeComponent("component20"),
    studentsStaff: makeNodeComponent("studentsStaff"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    sideNavBlocks3: makeNodeComponent("sideNavBlocks3"),
    dashboard: makeNodeComponent("dashboard"),
    _6: makeNodeComponent("_6"),
    component22: makeNodeComponent("component22"),
    cog: makeNodeComponent("cog"),
    dashboard2: makeNodeComponent("dashboard2"),
    component21: makeNodeComponent("component21"),
    fileInvoiceDollar: makeNodeComponent("fileInvoiceDollar"),
    fileInvoiceDollar2: makeNodeComponent("fileInvoiceDollar2"),
    dashboard3: makeNodeComponent("dashboard3"),
    _8: makeNodeComponent("_8"),

    // Metadata about props expected for PlasmicNav
    internalVariantProps: PlasmicNav__VariantProps,
    internalArgProps: PlasmicNav__ArgProps
  }
);

export default PlasmicNav;
/* prettier-ignore-end */
